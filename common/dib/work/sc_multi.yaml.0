heat_template_version: 2013-05-23

description: SoftwareConfig sample

parameters:
  image:
    type: string
    label: Image name or ID
    description: Image to be used for the server. Please use an Ubuntu based image.
    default: rhel7-custom
  flavor:
    type: string
    label: Flavor
    description: Type of instance (flavor) to be used on the compute instance.
    default: m1.rhel
  key_name:
    type: string
    label: Key name
    description: Name of key-pair to be installed on the compute instance.
    default: sshkey
  public_network:
    type: string
    label: Public network name or ID
    description: Public network with floating IP addresses.
    default: external
  repo_server:
    type: string
    label: test parameter
    description: test test parameter
    default: 10.64.200.85

resources:
#  wait_condition:
#    type: OS::Heat::WaitCondition
#    properties:
#      handle: { get_resource: wait_handle }
#      count: 1
#      timeout: 600
#
#  wait_handle:
#    type: OS::Heat::WaitConditionHandle

  secgroup:
    type: OS::Neutron::SecurityGroup
    properties:
      name: secgroup
      rules:
        - protocol: icmp
        - protocol: tcp
          port_range_min: 22
          port_range_max: 22
        - protocol: tcp
          port_range_min: 443
          port_range_max: 443
        - protocol: tcp
          port_range_min: 80
          port_range_max: 80

  private_network:
    type: OS::Neutron::Net

  private_subnet:
    type: OS::Neutron::Subnet
    properties:
      network_id: { get_resource: private_network }
      cidr: 192.168.88.0/24
      dns_nameservers:
        - 8.8.8.8

  router:
    type: OS::Neutron::Router
    properties:
      external_gateway_info:
        network: { get_param: public_network }

  router-interface:
    type: OS::Neutron::RouterInterface
    properties:
      router_id: { get_resource: router }
      subnet: { get_resource: private_subnet }

  config0:
    type: OS::Heat::SoftwareConfig
    properties:
      group: script
      inputs:
      - name: floating_ip1
      - name: floating_ip2
      - name: private_ip1
      - name: private_ip2
      outputs:
      - name: result
      config: |
        #!/bin/sh -x
        echo "Floating IP: $floating_ip1, $floating_ip2"
        echo "Private IP: $private_ip1, $private_ip2"

  config:
    type: OS::Heat::SoftwareConfig
    properties:
      group: script
      inputs:
      - name: foo
      - name: bar
      - name: repo_server
      outputs:
      - name: result
      config: |
        #!/bin/sh -x
        echo "Writing to /tmp/$bar"
        echo $foo > /tmp/$bar
        echo -n "The file /tmp/$bar contains `cat /tmp/$bar` for server $deploy_server_id during $deploy_action" > $heat_outputs_path.result
        echo "Written to /tmp/$bar"
        echo "Output to stderr" 1>&2

  deployment0:
    type: OS::Heat::SoftwareDeployment
    depends_on: [deployment1, deployment2]
    properties:
      config:
        get_resource: config0
      server:
        get_resource: server1
      input_values:
        floating_ip1: { get_attr: [floating_ip1, floating_ip_address] }
        floating_ip2: { get_attr: [floating_ip2, floating_ip_address] }
        private_ip1: { get_attr: [server1, networks, {get_attr: [private_network, name]}, 0]}
        private_ip2: { get_attr: [server2, networks, {get_attr: [private_network, name]}, 0]}

  deployment1:
    type: OS::Heat::SoftwareDeployment
    properties:
      config:
        get_resource: config
      server:
        get_resource: server1
      input_values:
        foo: foo1
        bar: baa1

  port1:
    type: OS::Neutron::Port
    properties:
      network: { get_resource: private_network }
      security_groups:
        - { get_resource: secgroup }

  server1:
    type: OS::Nova::Server
    properties:
      image: {get_param: image}
      flavor: {get_param: flavor}
      key_name: {get_param: key_name}
      networks:
        - port: { get_resource: port1 }
      user_data_format: SOFTWARE_CONFIG

  floating_ip1:
    type: OS::Neutron::FloatingIP
    properties:
      floating_network: { get_param: public_network }

  floating_ip_assoc1:
    type: OS::Neutron::FloatingIPAssociation
    properties:
      floatingip_id: { get_resource: floating_ip1 }
      port_id: { get_resource: port1 }

  deployment2:
    type: OS::Heat::SoftwareDeployment
    properties:
      config:
        get_resource: config
      server:
        get_resource: server2
      input_values:
        foo: foo2
        bar: baa2

  port2:
    type: OS::Neutron::Port
    properties:
      network: { get_resource: private_network }
      security_groups:
        - { get_resource: secgroup }

  server2:
    type: OS::Nova::Server
    properties:
      image: {get_param: image}
      flavor: {get_param: flavor}
      key_name: {get_param: key_name}
      networks:
        - port: { get_resource: port2 }
      user_data_format: SOFTWARE_CONFIG

  floating_ip2:
    type: OS::Neutron::FloatingIP
    properties:
      floating_network: { get_param: public_network }

  floating_ip_assoc2:
    type: OS::Neutron::FloatingIPAssociation
    properties:
      floatingip_id: { get_resource: floating_ip2 }
      port_id: { get_resource: port2 }

#outputs:
#  result:
#    value:
#      get_attr: [deployment, result]
#  stdout:
#    value:
#      get_attr: [deployment, deploy_stdout]
#  stderr:
#    value:
#      get_attr: [deployment, deploy_stderr]
#  status_code:
#    value:
#      get_attr: [deployment, deploy_status_code]
